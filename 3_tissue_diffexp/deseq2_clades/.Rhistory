i %in% FO_only
i %in% BR_only
i %in% OT_only
OT_only
BR_only
length(tissues==0)
length(tissues)==0
# Create vector with tissue-specific labels or "other"
upreg.df = data.frame(matrix(ncol = 2, nrow = 0))
colnames(full.upreg) = c("genes", "upreg.tissues")
for (i in clade.spec$genes) {
ie = paste("\\b", i, "\\b", sep="")
index = grep(ie, clade.spec$genes)
tissues = c()
if (i %in% BR_up) {
tissues = append(tissues, "brain")
}
if (i %in% OT_up) {
tissues = append(tissues, "oral tentacle")
}
if (i %in% RH_up) {
tissues = append(tissues, "rhinophore")
}
if (i %in% DC_up) {
tissues = append(tissues, "distal ceras")
}
if (i %in% FO_up) {
tissues = append(tissues, "foot")
}
if (i %in% TA_up) {
tissues = append(tissues, "tail")
}
if (length(tissues)==0) {
tissues = "none"
}
head(upreg.df)
# Create vector with tissue-specific labels or "other"
upreg.df = data.frame(matrix(ncol = 2, nrow = 0))
colnames(upreg.df) = c("genes", "upreg.tissues")
for (i in clade.spec$genes) {
ie = paste("\\b", i, "\\b", sep="")
index = grep(ie, clade.spec$genes)
tissues = c()
if (i %in% BR_up) {
tissues = append(tissues, "brain")
}
if (i %in% OT_up) {
tissues = append(tissues, "oral tentacle")
}
if (i %in% RH_up) {
tissues = append(tissues, "rhinophore")
}
if (i %in% DC_up) {
tissues = append(tissues, "distal ceras")
}
if (i %in% FO_up) {
tissues = append(tissues, "foot")
}
if (i %in% TA_up) {
tissues = append(tissues, "tail")
}
if (length(tissues)==0) {
tissues = "none"
}
tissues.df = data.frame(i, paste(tissues, sep="; "))
colnames(tissues.df) = c("genes", "upreg.tissues")
upreg.df = rbind(upreg.df.upreg, tissues.df)
}
i
clade.spec$genes
clade.spec
upreg.df = data.frame(matrix(ncol = 2, nrow = 0))
colnames(upreg.df) = c("genes", "upreg.tissues")
for (i in clade.spec$genes) {
ie = paste("\\b", i, "\\b", sep="")
index = grep(ie, clade.spec$genes)
tissues = c()
if (i %in% BR_up) {
tissues = append(tissues, "brain")
}
if (i %in% OT_up) {
tissues = append(tissues, "oral tentacle")
}
if (i %in% RH_up) {
tissues = append(tissues, "rhinophore")
}
if (i %in% DC_up) {
tissues = append(tissues, "distal ceras")
}
if (i %in% FO_up) {
tissues = append(tissues, "foot")
}
if (i %in% TA_up) {
tissues = append(tissues, "tail")
}
if (length(tissues)==0) {
tissues = "none"
}
tissues.df = data.frame(i, paste(tissues, sep="; "))
colnames(tissues.df) = c("genes", "upreg.tissues")
upreg.df = rbind(upreg.df, tissues.df)
}
head(clade.spec)
upreg.df = data.frame(matrix(ncol = 2, nrow = 0))
colnames(upreg.df) = c("genes", "upreg.tissues")
for (i in clade.spec$genes) {
ie = paste("\\b", i, "\\b", sep="")
index = grep(ie, clade.spec$genes)
tissues = c()
if (i %in% BR_up) {
tissues = append(tissues, "brain")
}
if (i %in% OT_up) {
tissues = append(tissues, "oral tentacle")
}
if (i %in% RH_up) {
tissues = append(tissues, "rhinophore")
}
if (i %in% DC_up) {
tissues = append(tissues, "distal ceras")
}
if (i %in% FO_up) {
tissues = append(tissues, "foot")
}
if (i %in% TA_up) {
tissues = append(tissues, "tail")
}
if (length(tissues)==0) {
tissues = "none"
}
tissues.df = data.frame(i, paste(tissues, sep="; "))
colnames(tissues.df) = c("genes", "upreg.tissues")
upreg.df = rbind(upreg.df, tissues.df)
}
head(upreg.df)
View(upreg.df)
BR_up
head(BR_up)
# Pull in lists of genes upregulated in each tissue
BR_up = read.csv("../deseq2_tissues/brain/Bs_tissues_brain_DESeq2-results-stats-filtered.csv", header=TRUE)[,1]
head(BR_up)
# Pull in lists of genes upregulated in each tissue
BR_up = read.csv("../deseq2_tissues/brain/Bs_tissues_brain_DESeq2-results-stats-filtered.csv", header=TRUE)[,1]
OT_up = read.csv("../deseq2_tissues/oraltentacle/Bs_tissues_oraltentacle_DESeq2-results-stats-filtered.csv", header=TRUE)[,1]
RH_up = read.csv("../deseq2_tissues/rhinophore/Bs_tissues_rhinophore_DESeq2-results-stats-filtered.csv", header=TRUE)[,1]
DC_up = read.csv("../deseq2_tissues/distceras/Bs_tissues_distceras_DESeq2-results-stats-filtered.csv", header=TRUE)[,1]
FO_up = read.csv("../deseq2_tissues/foot/Bs_tissues_foot_DESeq2-results-stats-filtered.csv", header=TRUE)[,1]
TA_up = read.csv("../deseq2_tissues/tail/Bs_tissues_tail_DESeq2-results-stats-filtered.csv", header=TRUE)[,1]
upreg.df = data.frame(matrix(ncol = 2, nrow = 0))
colnames(upreg.df) = c("genes", "upreg.tissues")
for (i in clade.spec$genes) {
ie = paste("\\b", i, "\\b", sep="")
index = grep(ie, clade.spec$genes)
tissues = c()
if (i %in% BR_up) {
tissues = append(tissues, "brain")
}
if (i %in% OT_up) {
tissues = append(tissues, "oral tentacle")
}
if (i %in% RH_up) {
tissues = append(tissues, "rhinophore")
}
if (i %in% DC_up) {
tissues = append(tissues, "distal ceras")
}
if (i %in% FO_up) {
tissues = append(tissues, "foot")
}
if (i %in% TA_up) {
tissues = append(tissues, "tail")
}
if (length(tissues)==0) {
tissues = "none"
}
tissues.df = data.frame(i, paste(tissues, sep="; "))
colnames(tissues.df) = c("genes", "upreg.tissues")
upreg.df = rbind(upreg.df, tissues.df)
}
head(upreg.df)
# Add tissue-specific labels to data frame
full.df = data.frame(full.df, upreg.df$upreg.tissues)
colnames(full.df)[4] = "upreg.tissues"
head(full.df)
# Create vector with tissue-specific labels or "other"
upreg.df = data.frame(matrix(ncol = 2, nrow = 0))
colnames(upreg.df) = c("genes", "upreg.tissues")
for (i in full.df$genes) {
ie = paste("\\b", i, "\\b", sep="")
index = grep(ie, full.df$genes)
tissues = c()
if (i %in% BR_up) {
tissues = append(tissues, "brain")
}
if (i %in% OT_up) {
tissues = append(tissues, "oral tentacle")
}
if (i %in% RH_up) {
tissues = append(tissues, "rhinophore")
}
if (i %in% DC_up) {
tissues = append(tissues, "distal ceras")
}
if (i %in% FO_up) {
tissues = append(tissues, "foot")
}
if (i %in% TA_up) {
tissues = append(tissues, "tail")
}
if (length(tissues)==0) {
tissues = "none"
}
tissues.df = data.frame(i, paste(tissues, sep="; "))
colnames(tissues.df) = c("genes", "upreg.tissues")
upreg.df = rbind(upreg.df, tissues.df)
}
# Add tissue-specific labels to data frame
full.df = data.frame(full.df, upreg.df$upreg.tissues)
colnames(full.df)[4] = "upreg.tissues"
tissues.df
i="jg10863"
i %in% BR_up
i %in% TA_up
ie = paste("\\b", i, "\\b", sep="")
index = grep(ie, full.df$genes)
tissues = c()
if (i %in% BR_up) {
tissues = append(tissues, "brain")
}
if (i %in% OT_up) {
tissues = append(tissues, "oral tentacle")
}
if (i %in% RH_up) {
tissues = append(tissues, "rhinophore")
}
if (i %in% DC_up) {
tissues = append(tissues, "distal ceras")
}
if (i %in% FO_up) {
tissues = append(tissues, "foot")
}
if (i %in% TA_up) {
tissues = append(tissues, "tail")
}
if (length(tissues)==0) {
tissues = "none"
}
tissues
paste(tissues, sep="; ")
?paste
paste(tissues, collapse="; ")
# Create vector with tissue-specific labels or "other"
upreg.df = data.frame(matrix(ncol = 2, nrow = 0))
colnames(upreg.df) = c("genes", "upreg.tissues")
for (i in full.df$genes) {
ie = paste("\\b", i, "\\b", sep="")
index = grep(ie, full.df$genes)
tissues = c()
if (i %in% BR_up) {
tissues = append(tissues, "brain")
}
if (i %in% OT_up) {
tissues = append(tissues, "oral tentacle")
}
if (i %in% RH_up) {
tissues = append(tissues, "rhinophore")
}
if (i %in% DC_up) {
tissues = append(tissues, "distal ceras")
}
if (i %in% FO_up) {
tissues = append(tissues, "foot")
}
if (i %in% TA_up) {
tissues = append(tissues, "tail")
}
if (length(tissues)==0) {
tissues = "none"
}
tissues.df = data.frame(i, paste(tissues, collapse="; "))
colnames(tissues.df) = c("genes", "upreg.tissues")
upreg.df = rbind(upreg.df, tissues.df)
}
# Add tissue-specific labels to data frame
full.df = data.frame(full.df, upreg.df$upreg.tissues)
colnames(full.df)[4] = "upreg.tissues"
head(full.df)
head(full.df, x = 20)
head(full.df, 20)
subset(full.df, "distal ceras" %in% upreg.tissues)
### Annotations
# Create matching data frames for annotations - Interproscan accessions
ipr.annot = data.frame(matrix(ncol = ncol(annot.db.sub), nrow = 0))
colnames(ipr.annot) = colnames(annot.db.sub)
for (i in full.df$genes) {
ie = paste("\\b", i, "\\b", sep="")
s = subset(annot.db.sub, grepl(ie, annot.db.sub$protein_id))
if(nrow(s)==0)
s = data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
ipr.annot = rbind(ipr.annot, s)
}
### Annotations
# Create matching data frames for annotations - Interproscan accessions
ipr.annot = data.frame(matrix(ncol = ncol(annot.db.sub), nrow = 0))
colnames(ipr.annot) = colnames(annot.db.sub)
for (i in full.df$genes) {
ie = paste("\\b", i, "\\b", sep="")
s = subset(annot.db.sub, grepl(ie, annot.db.sub$protein_id))
if(nrow(s)==0)
s = data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
ipr.annot = rbind(ipr.annot, s)
}
# Create matching data frames for annotations - BLASTP results
blastp.annot = data.frame(matrix(ncol = ncol(blastp.sub), nrow = 0))
colnames(blastp.annot) = colnames(blastp.sub)
for (i in full.df$genes) {
ie = paste("\\b", i, "\\b", sep="")
s = subset(blastp.sub, grepl(ie, blastp.sub$prot_id))
if(nrow(s)==0)
s = data.frame("prot_id"=i, "evalue"=NA, "uniprot_id"=NA,
"uniprot_code"=NA, "Protein.names"=NA, "Length"=NA, "Refseq"=NA, stringsAsFactors = FALSE)
blastp.annot = rbind(blastp.annot, s)
}
# Combine datasets into full data frame
full.df = data.frame(full.df, blastp.annot, ipr.annot)
full.df = full.df[,c(1:4,6:11,13:16)]
# Save table
write.table(full.df, "gene-specificity-annotation-summary.txt", sep = '\t', quote=FALSE, row.names=FALSE, na="NA")
# Create matching data frames for annotations - BLASTP results
blastp.annot = data.frame(matrix(ncol = ncol(blastp.sub), nrow = 0))
colnames(blastp.annot) = colnames(blastp.sub)
for (i in full.df$genes) {
ie = paste("\\b", i, "\\b", sep="")
s = subset(blastp.sub, grepl(ie, blastp.sub$prot_id))
if(nrow(s)==0)
s = data.frame("prot_id"=i, "evalue"=NA, "uniprot_id"=NA,
"uniprot_code"=NA, "Protein.names"=NA, "Length"=NA, "Refseq"=NA, stringsAsFactors = FALSE)
blastp.annot = rbind(blastp.annot, s)
}
head(blastp.sub)
colnames(blastp.sub)
s
# Create matching data frames for annotations - BLASTP results
blastp.annot = data.frame(matrix(ncol = ncol(blastp.sub), nrow = 0))
colnames(blastp.annot) = colnames(blastp.sub)
for (i in full.df$genes) {
ie = paste("\\b", i, "\\b", sep="")
s = subset(blastp.sub, grepl(ie, blastp.sub$prot_id))
if(nrow(s)==0)
s = data.frame("prot_id"=i, "db_id"=NA, "evalue"=NA, "Entry"=NA,
"Gene.names"=NA, "Refseq"=NA, "GO.terms"=NA,stringsAsFactors = FALSE)
blastp.annot = rbind(blastp.annot, s)
}
?DESeq2
??DESeq2
vignette("DESeq2")
packageVersion("DESeq2")
###################################
# Bs_genome_DESeq2.R
# Written by: Jessica A. Goodheart
# Last Updated: 10 June 2022
# Purpose: To analyze differential expression data from Berghia tissues in all genes.
# Inputs used: Expression counts from htseq-count
####################################
####################################
# Initial setup
####################################
# Set the working directory
directory <- "~/Dropbox/Research/2_Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/deseq2/"
read_dir <- "~/Dropbox/Research/2_Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/read_files/"
setwd(directory)
# Set the prefix for each output file name
outputPrefix <- "Bs_tissues_DESeq2"
####################################
# DESeq2 Analyses
# Modified from: https://benchtobioinformatics.wordpress.com/category/dexseq/
####################################
# Load DESeq2 library for differential expression
library("DESeq2")
install.packages(DESeq2)
install.packages("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
# Load DESeq2 library for differential expression
library("DESeq2")
# Read in counts files for each tissue
sampleFiles<- c("Bb7-BsV1_genome.counts",
"Bb8-BsV1_genome.counts",
"D1-BsV1_genome.counts",
"D2-BsV1_genome.counts",
"D4-BsV1_genome.counts",
"F1-BsV1_genome.counts",
"F4-BsV1_genome.counts",
"OT1-BsV1_genome.counts",
"OT2-BsV1_genome.counts",
"OT3-BsV1_genome.counts",
"P1-BsV1_genome.counts",
"P2-BsV1_genome.counts",
"P3-BsV1_genome.counts",
"R1-BsV1_genome.counts",
"R2-BsV1_genome.counts",
"R4-BsV1_genome.counts",
"TL3-BsV1_genome.counts",
"TL4-BsV1_genome.counts")
# Set sample names for counts
sampleNames <- c("Brain 7", "Brain 8",
"Distal Ceras 1", "Distal Ceras 2", "Distal Ceras 3",
"Foot 1", "Foot 2",
"Oral Tentacle 1", "Oral Tentacle 2", "Oral Tentacle 3",
"Proximal Ceras 1", "Proximal Ceras 2", "Proximal Ceras 3",
"Rhinophore 1", "Rhinophore 2", "Rhinophore 3",
"Tail 1", "Tail 2")
# Set sample conditions for counts
sampleCondition <- c("brain", "brain",
"distCeras","distCeras","distCeras",
"foot","foot",
"oralTent","oralTent","oralTent",
"proxCeras","proxCeras","proxCeras",
"rhinophore","rhinophore","rhinophore",
"tail","tail")
# Create DESeq2 sample table
sampleTable <- data.frame(sampleName = sampleNames, fileName = sampleFiles, condition = sampleCondition)
# Set treatment levels for DESeq2 analysis
treatments = c("brain","distCeras","foot","oralTent","proxCeras","rhinophore","tail")
# Create DESeq2 data set from counts
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = read_dir,
design = ~1 + condition)
colData(ddsHTSeq)$condition <- factor(colData(ddsHTSeq)$condition,
levels = treatments)
# Calculate differential expression based on the negative binomial (i.e., Gamma-Poisson) distribution
dds <- DESeq(ddsHTSeq)
dds
dds$condition
?`DESeqDataSet-class`
# Calculate results
res <- results(dds)
res
?subset(res,)
?subset
subset(res,baseMean=0.0)
subset(res,baseMean=0.000000)
subset(res,baseMean==0.000000)
# Stats
res_nocounts <- subset(res,baseMean==0.000000)
# Stats
res_nocounts <- subset(res,baseMean==0.000000)
num_nocounts <- nrow(res_nocounts)
num_nocounts
print(paste0("Proportion of genes not expressed: ", (num_nocounts/nrow(res))))
print(paste0("Proportion of genes not expressed: ", ((nrow(res)-num_nocounts)/nrow(res))))
###################################
# Initial setup
####################################
# Packages
require(ggplot2)
require(dplyr)
require(stringr)
getwd()
# Set the working directory
directory = "/Users/jessicagoodheart/Dropbox/Research/2_Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/deseq2/"
setwd(directory)
# Set the working directory
directory = "/Users/jessicagoodheart/Dropbox/Research/2_Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/deseq2/"
setwd(directory)
# Pull in counts data for all genes
all_genes = read.csv("Bs_tissues_DESeq2-full-normalized-counts.csv")
all_genes$gene = as.character(all_genes$gene)
# Pull in clade-specific lists of genes
berghia = scan("berghia/Berghia_stephanieae_genes.txt", what="", sep="\n")
aeolidoidea = scan("aeolidoidea/Aeolidioidea_only_genes.txt", what="", sep="\n")
nudibranchia = scan("nudibranchia/Nudibranchia_only_genes.txt", what="", sep="\n")
gastropoda = scan("gastropoda/Gastropoda_only_genes.txt", what="", sep="\n")
mollusca = scan("mollusca/Mollusca_only_genes.txt", what="", sep="\n")
other = scan("all_others//All_other_genes.txt", what="", sep="\n")
# Pull in tissue-specific lists of genes
BR_only = scan("all_genes/gene_annotations/Bs_tissues_allgenes_DESeq2-BR-only-genelist.txt", what="", sep="\n")
OT_only = scan("all_genes/gene_annotations/Bs_tissues_allgenes_DESeq2-OT-only-genelist.txt", what="", sep="\n")
RH_only = scan("all_genes/gene_annotations/Bs_tissues_allgenes_DESeq2-RH-only-genelist.txt", what="", sep="\n")
DC_only = scan("all_genes/gene_annotations/Bs_tissues_allgenes_DESeq2-DC-only-genelist.txt", what="", sep="\n")
PC_only = scan("all_genes/gene_annotations/Bs_tissues_allgenes_DESeq2-PC-only-genelist.txt", what="", sep="\n")
FO_only = scan("all_genes/gene_annotations/Bs_tissues_allgenes_DESeq2-FO-only-genelist.txt", what="", sep="\n")
TA_only = scan("all_genes/gene_annotations/Bs_tissues_allgenes_DESeq2-TA-only-genelist.txt", what="", sep="\n")
# Pull in lists of genes upregulated in each tissue
BR_up = read.csv("../deseq2_tissues/brain/Bs_tissues_brain_DESeq2-upregulated-stats-filtered.csv", header=TRUE)[,1]
OT_up = read.csv("../deseq2_tissues/oraltentacle/Bs_tissues_oraltentacle_DESeq2-upregulated-stats-filtered.csv", header=TRUE)[,1]
RH_up = read.csv("../deseq2_tissues/rhinophore/Bs_tissues_rhinophore_DESeq2-upregulated-stats-filtered.csv", header=TRUE)[,1]
DC_up = read.csv("../deseq2_tissues/distceras/Bs_tissues_distceras_DESeq2-upregulated-stats-filtered.csv", header=TRUE)[,1]
PC_up = read.csv("../deseq2_tissues/proximalceras/Bs_tissues_proximalceras_DESeq2-upregulated-stats-filtered.csv", header=TRUE)[,1]
FO_up = read.csv("../deseq2_tissues/foot/Bs_tissues_foot_DESeq2-upregulated-stats-filtered.csv", header=TRUE)[,1]
TA_up = read.csv("../deseq2_tissues/tail/Bs_tissues_tail_DESeq2-upregulated-stats-filtered.csv", header=TRUE)[,1]
# Pull in lists of genes downregulated in each tissue
BR_down = read.csv("../deseq2_tissues/brain/Bs_tissues_brain_DESeq2-downregulated-stats-filtered.csv", header=TRUE)[,1]
OT_down = read.csv("../deseq2_tissues/oraltentacle/Bs_tissues_oraltentacle_DESeq2-downregulated-stats-filtered.csv", header=TRUE)[,1]
RH_down = read.csv("../deseq2_tissues/rhinophore/Bs_tissues_rhinophore_DESeq2-downregulated-stats-filtered.csv", header=TRUE)[,1]
DC_down = read.csv("../deseq2_tissues/distceras/Bs_tissues_distceras_DESeq2-downregulated-stats-filtered.csv", header=TRUE)[,1]
PC_down = read.csv("../deseq2_tissues/proximalceras/Bs_tissues_proximalceras_DESeq2-downregulated-stats-filtered.csv", header=TRUE)[,1]
FO_down = read.csv("../deseq2_tissues/foot/Bs_tissues_foot_DESeq2-downregulated-stats-filtered.csv", header=TRUE)[,1]
TA_down = read.csv("../deseq2_tissues/tail/Bs_tissues_tail_DESeq2-downregulated-stats-filtered.csv", header=TRUE)[,1]
# Pull in interproscan database accessions
annot_db = read.table("../functional_annotation.txt", header=TRUE, sep="\t")
annot_db$protein_id = gsub(".t[0-9]*", "", as.character(annot_db$protein_id))
annot.db.sub = distinct(annot_db, protein_id, .keep_all=TRUE)
# Pull in blastp annotations
blastp = read.csv("../../genome_annot_nov2021/protein_annotations/filtered/Bs_protein-blasthit-ALL-info.txt", sep="\t",
header=TRUE, as.is=TRUE, na.strings=c("","NA"), fill=TRUE)
blastp$prot_id = gsub(".t[0-9]*", "", as.character(blastp$prot_id))
blastp.sub = distinct(blastp, prot_id, .keep_all=TRUE)
blastp.sub = blastp.sub[,c(1:4,6,10:11)]
