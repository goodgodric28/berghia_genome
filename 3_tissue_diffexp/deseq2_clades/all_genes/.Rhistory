"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
rh_only_acc <- rbind(rh_only_acc, s)
}
# Write out annotation summary for tissue-specific genes to file
write.table(rh_only_acc, paste0("gene_annotations/", outputPrefix, "-RH-accessions-summary.txt"), quote=FALSE, row.names = FALSE)
### Oral Tentacle and Rhinophore Only ###
## Interpro Scan annotations ##
# Pull out annotations into separate data frame
ot_rh_only_annot <- data.frame(matrix(ncol = ncol(annot_edit), nrow = 0))
for (i in ot_rh_only) {
colnames(ot_rh_only_annot) <- colnames(annot_edit)
t <- paste(i, ".", sep="")
s <- subset(annot_edit, grepl(t, annot_edit$prot_id, fixed=TRUE))
ot_rh_only_annot <- rbind(ot_rh_only_annot, s)
}
# Sort annotations by number of times present
ot_rh_label_summary <- sort(summary(ot_rh_only_annot$label), decreasing=TRUE)
ot_rh_label_summary <- ot_rh_label_summary[!ot_rh_label_summary %in% 0]
# Write out list of annotations to files
write.table(ot_rh_only_annot, paste0("gene_annotations/", outputPrefix, "-OT-RH-only-annotations.txt"), quote=FALSE, row.names = FALSE)
write.table(ot_rh_label_summary, paste0("gene_annotations/", outputPrefix, "-OT-RH-label-summary.txt"), quote=FALSE, col.names = FALSE)
# Sort go terms by number of times present
ot_rh_goterm_summary <- sort(summary(ot_rh_only_annot$go_term), decreasing=TRUE)
ot_rh_goterm_summary <- ot_rh_goterm_summary[!ot_rh_goterm_summary %in% 0]
# Write out list of go terms to file
write.table(ot_rh_goterm_summary, paste0("gene_annotations/", outputPrefix, "-OT-RH-goterms-summary.txt"), quote=FALSE, col.names = FALSE)
## Annotation accessions for different interproscan databases ##
# Pull out annotations into separate data frame
ot_rh_only_acc <- data.frame(matrix(ncol = ncol(annot_db), nrow = 0))
for (i in ot_rh_only) {
colnames(ot_rh_only_acc) <- colnames(annot_db)
t <- paste(i, ".", sep="")
s <- subset(annot_db, grepl(t, annot_db$protein_id, fixed=TRUE))
if(nrow(s)==0)
s <- data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
ot_rh_only_acc <- rbind(ot_rh_only_acc, s)
}
# Write out annotation summary for tissue-specific genes to file
write.table(ot_rh_only_acc, paste0("gene_annotations/", outputPrefix, "-OT-RH-accessions-summary.txt"), quote=FALSE, row.names = FALSE)
### Brain Only ###
## Interpro Scan annotations ##
# Pull out annotations into separate data frame
br_only_annot <- data.frame(matrix(ncol = ncol(annot_edit), nrow = 0))
for (i in br_only) {
colnames(br_only_annot) <- colnames(annot_edit)
t <- paste(i, ".", sep="")
s <- subset(annot_edit, grepl(t, annot_edit$prot_id, fixed=TRUE))
br_only_annot <- rbind(br_only_annot, s)
}
# Sort annotations by number of times present
br_label_summary <- sort(summary(br_only_annot$label), decreasing=TRUE)
br_label_summary <- br_label_summary[!br_label_summary %in% 0]
# Write out list of annotations to files
write.table(br_only_annot, paste0("gene_annotations/", outputPrefix, "-BR-only-annotations.txt"), quote=FALSE, row.names = FALSE)
write.table(br_label_summary, paste0("gene_annotations/", outputPrefix, "-BR-label-summary.txt"), quote=FALSE, col.names = FALSE)
# Sort go terms by number of times present
br_goterm_summary <- sort(summary(br_only_annot$go_term), decreasing=TRUE)
br_goterm_summary <- br_goterm_summary[!br_goterm_summary %in% 0]
# Write out list of go terms to file
write.table(br_goterm_summary, paste0("gene_annotations/", outputPrefix, "-BR-goterms-summary.txt"), quote=FALSE, col.names = FALSE)
## Annotation accessions for different interproscan databases ##
# Pull out annotations into separate data frame
br_only_acc <- data.frame(matrix(ncol = ncol(annot_db), nrow = 0))
for (i in br_only) {
colnames(br_only_acc) <- colnames(annot_db)
t <- paste(i, ".", sep="")
s <- subset(annot_db, grepl(t, annot_db$protein_id, fixed=TRUE))
if(nrow(s)==0)
s <- data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
br_only_acc <- rbind(br_only_acc, s)
}
# Write out annotation summary for tissue-specific genes to file
write.table(br_only_acc, paste0("gene_annotations/", outputPrefix, "-BR-accessions-summary.txt"), quote=FALSE, row.names = FALSE)
####################################
# Bs_genome_DESeq2_allgenes.R
# Written by: Jessica A. Goodheart
# Last Updated: 16 March 2022
# Purpose: To analyze differential expression data from Berghia tissues across all genes.
# Inputs used: Expression counts from htseq-count and Orthofinder/kinfin orthogroup results
####################################
####################################
# Initial setup
####################################
# Set the working directory
directory <- "~/Dropbox (Personal)/Research/4Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/deseq2/all"
read_dir <- "~/Dropbox (Personal)/Research/4Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/read_files/"
setwd(directory)
# Set the prefix for each output file name
outputPrefix <- "Bs_tissues_DESeq2"
####################################
# DESeq2 Analyses
# Modified from: https://benchtobioinformatics.wordpress.com/category/dexseq/
####################################
# Load DESeq2 library for differential expression
library("DESeq2")
# Read in counts files for each tissue
sampleFiles<- c("Bb7-BsV1_genome.counts",
"Bb8-BsV1_genome.counts",
"D1-BsV1_genome.counts",
"D2-BsV1_genome.counts",
"D4-BsV1_genome.counts",
"F1-BsV1_genome.counts",
"F4-BsV1_genome.counts",
"OT1-BsV1_genome.counts",
"OT2-BsV1_genome.counts",
"OT3-BsV1_genome.counts",
"P1-BsV1_genome.counts",
"P2-BsV1_genome.counts",
"P3-BsV1_genome.counts",
"R1-BsV1_genome.counts",
"R2-BsV1_genome.counts",
"R4-BsV1_genome.counts",
"TL3-BsV1_genome.counts",
"TL4-BsV1_genome.counts")
# Set sample names for counts
sampleNames <- c("Brain 7", "Brain 8",
"Distal Ceras 1", "Distal Ceras 2", "Distal Ceras 3",
"Foot 1", "Foot 2",
"Oral Tentacle 1", "Oral Tentacle 2", "Oral Tentacle 3",
"Proximal Ceras 1", "Proximal Ceras 2", "Proximal Ceras 3",
"Rhinophore 1", "Rhinophore 2", "Rhinophore 3",
"Tail 1", "Tail 2")
# Set sample conditions for counts
sampleCondition <- c("brain", "brain",
"distCeras","distCeras","distCeras",
"foot","foot",
"oralTent","oralTent","oralTent",
"proxCeras","proxCeras","proxCeras",
"rhinophore","rhinophore","rhinophore",
"tail","tail")
# Create DESeq2 sample table
sampleTable <- data.frame(sampleName = sampleNames, fileName = sampleFiles, condition = sampleCondition)
# Set treatment levels for DESeq2 analysis
treatments = c("brain","distCeras","foot","oralTent","proxCeras","rhinophore","tail")
# Create DESeq2 data set from counts
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = read_dir,
design = ~1 + condition)
colData(ddsHTSeq)$condition <- factor(colData(ddsHTSeq)$condition,
levels = treatments)
# Calculate differential expression based on the negative binomial (i.e., Gamma-Poisson) distribution
dds <- DESeq(ddsHTSeq)
res <- results(dds)
# Save data results and normalized reads to csv
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds,normalized =TRUE)), by = 'row.names', sort = FALSE)
names(resdata)[1] <- 'gene'
write.csv(resdata, file = paste0(outputPrefix, "-full-normalized-counts.csv"), quote=FALSE)
# order results by padj value (most significant to least)
res <- res[order(res$padj),]
# Subset results to only include Mollusca-specific genes
res=res[rownames(res) %in% mollusca_novel_genes, ]
# Produce DataFrame of results of statistical tests
mcols(res, use.names = T)
write.csv(as.data.frame(mcols(res, use.name = T)),file = paste0(outputPrefix, "-test-conditions.csv"), quote=FALSE)
# Replacing outlier value with estimated value as predicted by distrubution using
# "trimmed mean" approach. Recommended if you have several replicates per treatment
# DESeq2 will automatically do this if you have 7 or more replicates.
ddsClean <- replaceOutliersWithTrimmedMean(dds)
ddsClean <- DESeq(ddsClean)
tab <- table(initial = results(dds)$padj < 0.05,
cleaned = results(ddsClean)$padj < 0.05)
addmargins(tab)
write.csv(as.data.frame(tab),file = paste0(outputPrefix, "-replaceoutliers.csv"), quote=FALSE)
resClean <- results(ddsClean)
resClean = subset(res, padj<0.05)
resClean <- resClean[order(resClean$padj),]
write.csv(as.data.frame(resClean),file = paste0(outputPrefix, "-replaceoutliers-results.csv"), quote=FALSE)
####################################################################################
# Exploratory data analysis of RNAseq data with DESeq2
#
# these next R scripts are for a variety of visualization, QC and other plots to
# get a sense of what the RNAseq data looks like based on DESEq2 analysis
#
# 1) MA plot
# 2) rlog stabilization and variance stabiliazation
# 3) variance stabilization plot
# 4) heatmap of clustering analysis
# 5) PCA plot
####################################################################################
# MA plot of RNAseq data for entire dataset
# http://en.wikipedia.org/wiki/MA_plot
# genes with padj < 0.1 are colored Red
plotMA(dds, ylim=c(-8,8),main = "RNAseq experiment")
dev.copy(png, paste0(outputPrefix, "-MAplot_initial_analysis.png"))
dev.off()
# Transform raw counts into normalized values
# DESeq2 has two options:  1) rlog transformed and 2) variance stabilization
# variance stabilization is very good for heatmaps, etc.
rld <- rlogTransformation(dds, blind=T)
vsd <- varianceStabilizingTransformation(dds, blind=T)
# Plot to show effect of transformation
# Axis is square root of variance over the mean for all samples
par(mai = ifelse(1:4 <= 2, par('mai'),0))
px <- counts(dds)[,1] / sizeFactors(dds)[1]
ord <- order(px)
ord <- ord[px[ord] < 150]
ord <- ord[seq(1,length(ord),length=50)]
last <- ord[length(ord)]
vstcol <- c('blue','black')
matplot(px[ord], cbind(assay(vsd)[,1], log2(px))[ord, ],type='l', lty = 1, col=vstcol, xlab = 'n', ylab = 'f(n)')
legend('bottomright',legend=c(expression('variance stabilizing transformation'), expression(log[2](n/s[1]))), fill=vstcol)
dev.copy(png,paste0(outputPrefix, "-variance_stabilizing.png"))
dev.off()
# Save normalized values
write.table(cbind(as.data.frame(genes), as.data.frame(assay(rld))),
file = paste0(outputPrefix, "-rlog-transformed-counts-filtered.txt"), sep = '\t', quote=FALSE)
write.table(cbind(as.data.frame(genes), as.data.frame(assay(vsd))),
file = paste0(outputPrefix, "-vst-transformed-counts-filtered.txt"), sep = '\t', quote=FALSE)
# Clustering analysis
# Excerpts from http://dwheelerau.com/2014/02/17/how-to-use-deseq2-to-analyse-rnaseq-data/
library("RColorBrewer")
library("gplots")
distsRL <- dist(t(assay(rld)))
mat <- as.matrix(distsRL)
rownames(mat) <- colnames(mat) <- with(colData(dds),sampleNames)
hmcol <- colorRampPalette(brewer.pal(9, "GnBu"))(100)
png(paste0(outputPrefix, "-clustering.png"), width=1100, height=1000)
heatmap.2(mat, trace = "none", col = rev(hmcol), margin = c(13,13), cexRow = 1.7, cexCol = 1.7)
dev.off()
# Principal components plot shows additional but rough clustering of samples
library("genefilter")
library("ggplot2")
library("grDevices")
rv <- rowVars(assay(rld))
select <- order(rv, decreasing=T)[seq_len(min(500,length(rv)))]
pc <- prcomp(t(assay(rld)[select,]))
condition <- treatments
sampleCondition2 <- c("Brain", "Brain",
"Distal Ceras","Distal Ceras","Distal Ceras",
"Foot","Foot",
"Oral Tentacle","Oral Tentacle","Oral Tentacle",
"Proximal Ceras","Proximal Ceras","Proximal Ceras",
"Rhinophore","Rhinophore","Rhinophore",
"Tail","Tail")
scores <- data.frame(pc$x, sampleCondition2)
(pcaplot <- ggplot(scores, aes(x = PC1, y = PC2, col = (factor(sampleCondition2))))
+ geom_point(size = 5)
+ scale_colour_brewer(name = " ", palette = "Set1")
+ theme(
legend.key = element_rect(fill = 'NA'),
legend.text = element_text(size = 10, face = "bold"),
axis.text.y = element_text(colour = "Black"),
axis.text.x = element_text(colour = "Black"),
axis.title.x = element_text(face = "bold"),
axis.title.y = element_text(face = 'bold'),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.minor.y = element_blank(),
panel.background = element_rect(color = 'black',fill = NA),
text = element_text(size = 20)
))
ggsave(pcaplot,file=paste0(outputPrefix, "-pcaplot.pdf"))
dev.off()
# Data heatmaps
library("RColorBrewer")
library("gplots")
# Top 200 expressed genes with heatmap.2
select <- order(rowMeans(counts(ddsClean,normalized=T)),decreasing=T)[1:200]
my_palette <- colorRampPalette(c("blue",'white','red'))(n=200)
heatmap.2(assay(rld)[select,], col=my_palette,
scale="row", key=T, keysize=1, symkey=T,
density.info="none", trace="none",
cexCol=0.6, labRow=F,
main="200 Top Expressed Genes Heatmap")
dev.copy(png, paste0(outputPrefix, "-HEATMAP-top200.png"))
dev.off()
# Top 500 expressed genes with heatmap.2
select <- order(rowMeans(counts(ddsClean,normalized=T)),decreasing=T)[1:500]
my_palette <- colorRampPalette(c("blue",'white','red'))(n=500)
heatmap.2(assay(rld)[select,], col=my_palette,
scale="row", key=T, keysize=1, symkey=T,
density.info="none", trace="none",
cexCol=0.6, labRow=F,
main="Top 500 Expressed Genes Heatmap")
dev.copy(png, paste0(outputPrefix, "-HEATMAP-top500.png"))
dev.off()
################################################
### Venn Diagram from presence/absence data ####
################################################
library(ggpolypath)
library(RColorBrewer)
library(venn)
# Create presence/absence data frames for venn diagram construction
dds_df <- as.data.frame(counts(dds),normalized=T)
venn_df <- data.frame(matrix(ncol = 0, nrow = nrow(dds_df)))
rownames(venn_df) <- rownames(dds_df)
# Calculate average expression for each tissue type in new data frame
venn_df$DC <- (dds_df$`Distal Ceras 1` + dds_df$`Distal Ceras 2` + dds_df$`Distal Ceras 3`)/3
venn_df$PC <- (dds_df$`Proximal Ceras 1` + dds_df$`Proximal Ceras 2` + dds_df$`Proximal Ceras 3`)/3
venn_df$OT <- (dds_df$`Oral Tentacle 1` + dds_df$`Oral Tentacle 2` + dds_df$`Oral Tentacle 3`)/3
venn_df$RH <- (dds_df$`Rhinophore 1` + dds_df$`Rhinophore 2` + dds_df$`Rhinophore 3`)/3
venn_df$BR <- (dds_df$`Brain 7` + dds_df$`Brain 8`)/2
venn_df$TL <- (dds_df$`Tail 1` + dds_df$`Tail 2`)/2
venn_df$FO <- (dds_df$`Foot 1` + dds_df$`Foot 2`)/2
# Determine presence absence using average expression: Normalized counts > 0.5 considered present
venn_df[venn_df > 0.5] <- as.integer(1)
venn_df[venn_df <= 0.5] <- as.integer(0)
colnames(venn_df)<-c("Distal Ceras",  "Proximal Ceras",
"Oral Tentacle", "Rhinophore", "Brain",
"Tail", "Foot")
# Plot venn diagram
cols = brewer.pal(7, "Set2")
png(file=paste0(outputPrefix, "-venn-diagram.png"), width=1000, height=1000)
venn::venn(venn_df, zcolor=cols, ilcs = 2, sncs = 2, plotsize=100)
dev.off()
################################################
##### Gene list from presence/absence data #####
################################################
library(dplyr)
library(R.utils)
library(ProtDomSeq)
# Change presence/absence data set column names
colnames(venn_df) <- c("DC",  "PC", "OT", "RH", "BR", "TA", "FO")
# Pull out gene names for genes only expressed in certain tissues and save
dc_only <- rownames(filter(venn_df, DC=="1" & PC=="0" & OT=="0" & RH=="0" & BR=="0" & TA=="0" & FO=="0"))
ot_only <- rownames(filter(venn_df, DC=="0" & PC=="0" & OT=="1" & RH=="0" & BR=="0" & TA=="0" & FO=="0"))
rh_only <- rownames(filter(venn_df, DC=="0" & PC=="0" & OT=="0" & RH=="1" & BR=="0" & TA=="0" & FO=="0"))
ot_rh_only <- rownames(filter(venn_df, DC=="0" & PC=="0" & OT=="1" & RH=="1" & BR=="0" & TA=="0" & FO=="0"))
br_only <- rownames(filter(venn_df, DC=="0" & PC=="0" & OT=="0" & RH=="0" & BR=="1" & TA=="0" & FO=="0"))
# Write out tables with genes only expressed in (a) certain tissue(s)
write.table(dc_only, paste0("gene_annotations/", outputPrefix, "-DC-only-genelist.txt"), quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(ot_only, paste0("gene_annotations/", outputPrefix, "-OT-only-genelist.txt"), quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(rh_only, paste0("gene_annotations/", outputPrefix, "-RH-only-genelist.txt"), quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(ot_rh_only, paste0("gene_annotations/", outputPrefix, "-OT_RH-only-genelist.txt"), quote=FALSE, row.names = FALSE, col.names = FALSE)
write.table(br_only, paste0("gene_annotations/", outputPrefix, "-BR-only-genelist.txt"), quote=FALSE, row.names = FALSE, col.names = FALSE)
# Pull in interproscan annotation data
annot <- read.csv("../../../genome_annot_nov2021/protein_annotations/berghia_RM_iso_anysupport_ipscan_2021_11.tsv", sep="\t")
annot_edit <- annot[-c(2:3,7:11)]
colnames(annot_edit) <- c("prot_id", "source", "type", "label", "ipr_id", "go_term")
# Pull in interproscan database accessions
annot_db <- read.table("../../functional_annotation.txt", header=TRUE, sep="\t")
# Pull in blastp hits separately
blastp <- read.table("../../../genome_annot_nov2021/blastp_annotation.gff", sep="\t")
blastp <- blastp[-c(4:5,7:8)]
colnames(blastp) <- c("chromosome","source","match","length","hit")
# Pull out annotation data for tissue-specific Berghia genes
### Distal Ceras Only ###
## Interpro Scan annotations ##
# Pull out annotations into separate data frame
dc_only_annot <- data.frame(matrix(ncol = ncol(annot_edit), nrow = 0))
for (i in dc_only) {
colnames(dc_only_annot) <- colnames(annot_edit)
t <- paste(i, ".", sep="")
s <- subset(annot_edit, grepl(t, annot_edit$prot_id, fixed=TRUE))
dc_only_annot <- rbind(dc_only_annot, s)
}
# Sort annotations by number of times present
dc_label_summary <- sort(summary(dc_only_annot$label), decreasing=TRUE)
dc_label_summary <- dc_label_summary[!dc_label_summary %in% 0]
# Write out list of annotations to files
write.table(dc_only_annot, paste0("gene_annotations/", outputPrefix, "-DC-only-annotations.txt"), quote=FALSE, row.names = FALSE)
write.table(dc_label_summary, paste0("gene_annotations/", outputPrefix, "-DC-label-summary.txt"), quote=FALSE, col.names = FALSE)
# Sort go terms by number of times present
dc_goterm_summary <- sort(summary(dc_only_annot$go_term), decreasing=TRUE)
dc_goterm_summary <- dc_goterm_summary[!dc_goterm_summary %in% 0]
# Write out list of go terms to file
write.table(dc_goterm_summary, paste0("gene_annotations/", outputPrefix, "-DC-goterms-summary.txt"), quote=FALSE, col.names = FALSE)
## Annotation accessions for different interproscan databases ##
# Pull out annotations into separate data frame
dc_only_acc <- data.frame("protein_id"=character(0), "GO"=character(0), "IPR"=character(0),
"SignalP_EUK"=character(0), "Pfam"=character(0), stringsAsFactors = FALSE)
for (i in dc_only) {
t <- paste(i, ".", sep="")
s <- subset(annot_db, grepl(t, annot_db$protein_id, fixed=TRUE))
if(nrow(s)==0)
s <- data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
dc_only_acc <- rbind(dc_only_acc, s)
}
# Write out annotation summary for tissue-specific genes to file
write.table(dc_only_acc, paste0("gene_annotations/", outputPrefix, "-DC-accessions-summary.txt"), quote=FALSE, row.names = FALSE)
### Oral Tentacle Only ###
## Interpro Scan annotations ##
# Pull out annotations into separate data frame
ot_only_annot <- data.frame(matrix(ncol = ncol(annot_edit), nrow = 0))
for (i in ot_only) {
colnames(ot_only_annot) <- colnames(annot_edit)
t <- paste(i, ".", sep="")
s <- subset(annot_edit, grepl(t, annot_edit$prot_id, fixed=TRUE))
ot_only_annot <- rbind(ot_only_annot, s)
}
# Sort annotations by number of times present
ot_label_summary <- sort(summary(ot_only_annot$label), decreasing=TRUE)
ot_label_summary <- ot_label_summary[!ot_label_summary %in% 0]
# Write out list of annotations to files
write.table(ot_only_annot, paste0("gene_annotations/", outputPrefix, "-OT-only-annotations.txt"), quote=FALSE, row.names = FALSE)
write.table(ot_label_summary, paste0("gene_annotations/", outputPrefix, "-OT-label-summary.txt"), quote=FALSE, col.names = FALSE)
# Sort go terms by number of times present
ot_goterm_summary <- sort(summary(ot_only_annot$go_term), decreasing=TRUE)
ot_goterm_summary <- ot_goterm_summary[!ot_goterm_summary %in% 0]
# Write out list of go terms to file
write.table(ot_goterm_summary, paste0("gene_annotations/", outputPrefix, "-OT-goterms-summary.txt"), quote=FALSE, col.names = FALSE)
## Annotation accessions for different interproscan databases ##
# Pull out annotations into separate data frame
ot_only_acc <- data.frame(matrix(ncol = ncol(annot_db), nrow = 0))
for (i in ot_only) {
colnames(ot_only_acc) <- colnames(annot_db)
t <- paste(i, ".", sep="")
s <- subset(annot_db, grepl(t, annot_db$protein_id, fixed=TRUE))
if(nrow(s)==0)
s <- data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
ot_only_acc <- rbind(ot_only_acc, s)
}
# Write out annotation summary for tissue-specific genes to file
write.table(ot_only_acc, paste0("gene_annotations/", outputPrefix, "-OT-accessions-summary.txt"), quote=FALSE, row.names = FALSE)
### Rhinophore Only ###
## Interpro Scan annotations ##
# Pull out annotations into separate data frame
rh_only_annot <- data.frame(matrix(ncol = ncol(annot_edit), nrow = 0))
for (i in rh_only) {
colnames(rh_only_annot) <- colnames(annot_edit)
t <- paste(i, ".", sep="")
s <- subset(annot_edit, grepl(t, annot_edit$prot_id, fixed=TRUE))
rh_only_annot <- rbind(rh_only_annot, s)
}
# Sort annotations by number of times present
rh_label_summary <- sort(summary(rh_only_annot$label), decreasing=TRUE)
rh_label_summary <- rh_label_summary[!rh_label_summary %in% 0]
# Write out list of annotations to files
write.table(rh_only_annot, paste0("gene_annotations/", outputPrefix, "-RH-only-annotations.txt"), quote=FALSE, row.names = FALSE)
write.table(rh_label_summary, paste0("gene_annotations/", outputPrefix, "-RH-label-summary.txt"), quote=FALSE, col.names = FALSE)
# Sort go terms by number of times present
rh_goterm_summary <- sort(summary(rh_only_annot$go_term), decreasing=TRUE)
rh_goterm_summary <- rh_goterm_summary[!rh_goterm_summary %in% 0]
# Write out list of go terms to file
write.table(rh_goterm_summary, paste0("gene_annotations/", outputPrefix, "-RH-goterms-summary.txt"), quote=FALSE, col.names = FALSE)
## Annotation accessions for different interproscan databases ##
# Pull out annotations into separate data frame
rh_only_acc <- data.frame(matrix(ncol = ncol(annot_db), nrow = 0))
for (i in rh_only) {
colnames(rh_only_acc) <- colnames(annot_db)
t <- paste(i, ".", sep="")
s <- subset(annot_db, grepl(t, annot_db$protein_id, fixed=TRUE))
if(nrow(s)==0)
s <- data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
rh_only_acc <- rbind(rh_only_acc, s)
}
# Write out annotation summary for tissue-specific genes to file
write.table(rh_only_acc, paste0("gene_annotations/", outputPrefix, "-RH-accessions-summary.txt"), quote=FALSE, row.names = FALSE)
### Oral Tentacle and Rhinophore Only ###
## Interpro Scan annotations ##
# Pull out annotations into separate data frame
ot_rh_only_annot <- data.frame(matrix(ncol = ncol(annot_edit), nrow = 0))
for (i in ot_rh_only) {
colnames(ot_rh_only_annot) <- colnames(annot_edit)
t <- paste(i, ".", sep="")
s <- subset(annot_edit, grepl(t, annot_edit$prot_id, fixed=TRUE))
ot_rh_only_annot <- rbind(ot_rh_only_annot, s)
}
# Sort annotations by number of times present
ot_rh_label_summary <- sort(summary(ot_rh_only_annot$label), decreasing=TRUE)
ot_rh_label_summary <- ot_rh_label_summary[!ot_rh_label_summary %in% 0]
# Write out list of annotations to files
write.table(ot_rh_only_annot, paste0("gene_annotations/", outputPrefix, "-OT-RH-only-annotations.txt"), quote=FALSE, row.names = FALSE)
write.table(ot_rh_label_summary, paste0("gene_annotations/", outputPrefix, "-OT-RH-label-summary.txt"), quote=FALSE, col.names = FALSE)
# Sort go terms by number of times present
ot_rh_goterm_summary <- sort(summary(ot_rh_only_annot$go_term), decreasing=TRUE)
ot_rh_goterm_summary <- ot_rh_goterm_summary[!ot_rh_goterm_summary %in% 0]
# Write out list of go terms to file
write.table(ot_rh_goterm_summary, paste0("gene_annotations/", outputPrefix, "-OT-RH-goterms-summary.txt"), quote=FALSE, col.names = FALSE)
## Annotation accessions for different interproscan databases ##
# Pull out annotations into separate data frame
ot_rh_only_acc <- data.frame(matrix(ncol = ncol(annot_db), nrow = 0))
for (i in ot_rh_only) {
colnames(ot_rh_only_acc) <- colnames(annot_db)
t <- paste(i, ".", sep="")
s <- subset(annot_db, grepl(t, annot_db$protein_id, fixed=TRUE))
if(nrow(s)==0)
s <- data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
ot_rh_only_acc <- rbind(ot_rh_only_acc, s)
}
# Write out annotation summary for tissue-specific genes to file
write.table(ot_rh_only_acc, paste0("gene_annotations/", outputPrefix, "-OT-RH-accessions-summary.txt"), quote=FALSE, row.names = FALSE)
### Brain Only ###
## Interpro Scan annotations ##
# Pull out annotations into separate data frame
br_only_annot <- data.frame(matrix(ncol = ncol(annot_edit), nrow = 0))
for (i in br_only) {
colnames(br_only_annot) <- colnames(annot_edit)
t <- paste(i, ".", sep="")
s <- subset(annot_edit, grepl(t, annot_edit$prot_id, fixed=TRUE))
br_only_annot <- rbind(br_only_annot, s)
}
# Sort annotations by number of times present
br_label_summary <- sort(summary(br_only_annot$label), decreasing=TRUE)
br_label_summary <- br_label_summary[!br_label_summary %in% 0]
# Write out list of annotations to files
write.table(br_only_annot, paste0("gene_annotations/", outputPrefix, "-BR-only-annotations.txt"), quote=FALSE, row.names = FALSE)
write.table(br_label_summary, paste0("gene_annotations/", outputPrefix, "-BR-label-summary.txt"), quote=FALSE, col.names = FALSE)
# Sort go terms by number of times present
br_goterm_summary <- sort(summary(br_only_annot$go_term), decreasing=TRUE)
br_goterm_summary <- br_goterm_summary[!br_goterm_summary %in% 0]
# Write out list of go terms to file
write.table(br_goterm_summary, paste0("gene_annotations/", outputPrefix, "-BR-goterms-summary.txt"), quote=FALSE, col.names = FALSE)
## Annotation accessions for different interproscan databases ##
# Pull out annotations into separate data frame
br_only_acc <- data.frame(matrix(ncol = ncol(annot_db), nrow = 0))
for (i in br_only) {
colnames(br_only_acc) <- colnames(annot_db)
t <- paste(i, ".", sep="")
s <- subset(annot_db, grepl(t, annot_db$protein_id, fixed=TRUE))
if(nrow(s)==0)
s <- data.frame("protein_id"=i, "GO"="None", "IPR"="None",
"SignalP_EUK"="None", "Pfam"="None", stringsAsFactors = FALSE)
br_only_acc <- rbind(br_only_acc, s)
}
