getBM(attributes=c('go_id', 'external_gene_name', 'namespace_1003'), filters='external_gene_name', values=bg_genes, mart=db)
head(genes.interest)
# Create list of all genes
genes.interest.filt <- subset(genes.interest, GO.terms!="None")
head(genes.interest.filt)
geneUniverse <- as.character(genes.interest.filt$genes)
# Create list of candidate genes
candidates <- as.character(geneID2GO$genes)
keep <- candidates %in% geneUniverse
keep <- which(keep==TRUE)
candidate_list <- candidates[keep]
length(candidates)
length(candidate_list)
# Make named factor showing which genes are of interest
geneList <- factor(as.integer(geneUniverse %in% candidate_list))
names(geneList) <- geneUniverse
go.data <- new("topGOdata", description=paste0(outputPrefix, "-go"), ontology="MF", allGenes=geneList, geneSel=topDiffGenes,
nodeSize=10, annot=annFUN.gene2GO, gene2GO=geneID2GO)
geneID2GO.filt <- subset(geneID2GO, GO.terms!="None")
head(geneID2GO)
head(geneID2GO.filt)
unstack(subset(geneID2GO, GO.terms!="None"))
geneID2GO.filt <- unstack(subset(geneID2GO, GO.terms!="None"))
go.data <- new("topGOdata", description=paste0(outputPrefix, "-go"), ontology="MF", allGenes=geneList, geneSel=topDiffGenes,
nodeSize=10, annot=annFUN.gene2GO, gene2GO=geneID2GO.filt)
unstack(geneID2GO.filt)
unstack(geneID2GO.filt[,c(1,2)])
?unstack
head(geneID2GO.filt)
geneID2GO.filt <- subset(geneID2GO, GO.terms!="None")
unstack(geneID2GO.filt)
unstack(as.character(geneID2GO.filt))
geneID2GO.filt <- as.character(subset(geneID2GO, GO.terms!="None"))
unstack(geneID2GO.filt)
head(geneID2GO)
head(geneID2GO.filt)
library(edgeR)
candidates
geneID2GO
acc
genes.interest
# Goana analysis
go.result <- goana(resClean.up, gene.pathway=go.terms)
# Goana analysis
go.result <- goana(resClean.up, gene.pathway=genes.interest)
class(resClean)
# Goana analysis
go.result <- goana(resClean, gene.pathway=genes.interest)
?goana
resClean
ddsClean
ddsClean
# Library
require("goseq")
packages.install("goseq")
install.packages("goseq")
# Get GO data for all genes
de.genes = rownames(resClean) %in% rownames(resClean.up)
names(de.genes) = rownames(resClean)
head(de.genes)
# Get GO data for all genes
de.genes = as.integer(rownames(resClean) %in% rownames(resClean.up))
names(de.genes) = rownames(resClean)
head(de.genes)
ddsClean
assay(ddsClean)
# Gene lengths data
read.table("../gene_lengths.txt", sep = "\t")
# Gene lengths data
gene.lengths = read.table("../gene_lengths.txt", sep = " ")
head(gene.lengths)
colnames(gene.lengths) = c("gene", "length")
?read.table
unlist(gene.lengths)
unlist(gene.lengths$length)
# Gene lengths data
gene.lengths.df = read.table("../gene_lengths.txt", sep = " ")
colnames(gene.lengths.df) = c("gene", "length")
gene.lengths = unlist(gene.lengths.df$length)
names(gene.lengths) = gene.lengths.df$gene
head(gene.lengths)
table(de.genes)
?nullp()
# Library
require("goseq")
install.packages("goseq")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
# Library
require("goseq")
?nullp
supportedGeneIDs()
# Fit probability weight function
pwf = nullp(de.genes, gene.lengths)
# Fit probability weight function
pwf = nullp(de.genes, bias.data=gene.lengths)
length(de.genes)
# Get GO data for all genes
de.genes = as.integer(names(gene.lengths) %in% rownames(resClean.up))
names(de.genes) = names(gene.lengths)
length(gene.lengths)
# Fit probability weight function
pwf = nullp(de.genes, bias.data=gene.lengths)
head(pwf)
?goseq
?grep
# Annotation data
annot.go = data.frame(gsub(".t[0-9]*", "", annot_db$protein_id), annot_db$GO)
colnames(annot.go) = c("gene_id", "go.terms")
head(annot.go)
# Goseq analysis
go.result = goseq(pwf, gene2cat = annot.go)
head(go.result)
require("dplyr")
annot.go.edit = annot.go %>% mutate(V2 = strsplit(as.character(go.terms), ";")) %>% unnest(go.terms)
?>?unnest
??unnest
require("tidyr")
annot.go.edit = annot.go %>% mutate(V2 = strsplit(as.character(go.terms), ";")) %>% unnest(go.terms)
head(annot.go.edit)
annot.go.edit = annot.go %>% mutate(go.terms = strsplit(as.character(go.terms), ";")) %>% unnest(go.terms)
head(annot.go.edit)
# Goseq analysis
go.result = goseq(pwf, gene2cat = annot.go.edit)
annot.go.edit = subset(annot.go.edit, go.terms!="None")
# Goseq analysis
go.result = goseq(pwf, gene2cat = annot.go.edit)
annot.go.edit = as.data.frame(annot.go %>% mutate(go.terms = strsplit(as.character(go.terms), ";")) %>% unnest(go.terms))
annot.go.edit = subset(annot.go.edit, go.terms!="None")
# Goseq analysis
go.result = goseq(pwf, gene2cat = annot.go.edit)
annot.go.edit = as.data.frame(annot.go %>% mutate(go.terms = strsplit(as.character(go.terms), ";")) %>% unnest(go.terms))
# Goseq analysis
go.result = goseq(pwf, gene2cat = annot.go.edit)
head(go.result)
head(subset(go.result,ontology="MF"))
head(subset(go.result,ontology=="MF"))
go.samp = goseq(pwf, gene2cat = annot.go.edit, method="Sampling", repcnt=1000)
head(go.samp)
tail(go.samp)
# Goseq analysis
GO.wall = goseq(pwf, gene2cat = annot.go.edit)
GO.samp = goseq(pwf, gene2cat = annot.go.edit, method="Sampling", repcnt=1000)
plot(log10(GO.wall[,2]), log10(GO.samp[match(GO.wall[,1],GO.samp[,1]),2]),
+ xlab="log10(Wallenius p-values)",ylab="log10(Sampling p-values)",
+ xlim=c(-3,0))
plot(log10(GO.wall[,2]), log10(GO.samp[match(GO.wall[,1],GO.samp[,1]),2]), xlab="log10(Wallenius p-values)",ylab="log10(Sampling p-values)", xlim=c(-3,0))
abline(0,1,col=3,lty=2)
####################################
# Lineage-specific gene analysis
####################################
library(purrr)
GO.wall[,1]
GO.nobias = goseq(pwf, gene2cat = annot.go.edit, method="Hypergeometric")
plot(log10(GO.wall[,2]), log10(GO.nobias[match(GO.wall[,1],GO.nobias[,1]),2]), xlab="log10(Wallenius p-values)", ylab="log10(Hypergeometric p-values)", xlim=c(-3,0), ylim=c(-3,0))
abline(0,1,col=3,lty=2)
plot(log10(GO.samp[,2]), log10(GO.nobias[match(GO.samp[,1],GO.nobias[,1]),2]), xlab="log10(Sampling p-values)", ylab="log10(Hypergeometric p-values)", xlim=c(-3,0), ylim=c(-3,0))
abline(0,1,col=3,lty=2)
head(GO.nobias)
enriched.GO=GO.nobias$category[p.adjust(GO.nobias$over_represented_pvalue, method="BH")<.05]
head(enriched.GO)
####################################
# Lineage-specific gene analysis
####################################
library(purrr)
p.adjust(GO.nobias$over_represented_pvalue, method="BH")
?p.adjust
p.adjust(GO.nobias$over_represented_pvalue, method="BY")
enriched.GO=GO.nobias$category[p.adjust(GO.nobias$over_represented_pvalue, method="BY")<.05]
head(enriched.GO)
enriched.GO=GO.nobias$category[GO.nobias$over_represented_pvalue<.05]
enriched.GO
require("GO.db")
for(go in enriched.GO[1:10]){
+ print(GOTERM[[go]])
+ cat("--------------------------------------\n")
+ }
for(go in enriched.GO[1:10]){
print(GOTERM[[go]]) cat("--------------------------------------\n"}
for(go in enriched.GO[1:10]){
print(GOTERM[[go]])
cat("--------------------------------------\n"}
for(go in enriched.GO[1:10]){
print(GOTERM[[go]])
cat("--------------------------------------\n"
}
for(go in enriched.GO[1:10]){
print(GOTERM[[go]])
cat("--------------------------------------\n"
}
for(go in enriched.GO[1:10]){
print(GOTERM[[go]])
cat("--------------------------------------\n"
}
for(go in enriched.GO[1:10]){
print(GOTERM[[go]])
cat("--------------------------------------\n")
}
####################################
# Bs_genome_DESeq2_distceras.R
# Written by: Jessica A. Goodheart
# Last Updated: 5 July 2022
# Purpose: To analyze the clade distribution and expression of distal ceras genes in Berghia
# Inputs used: Expression counts from htseq-count and Orthofinder/kinfin orthogroup results
####################################
####################################
# Initial setup
####################################
# Set the working directory
directory = "~/Dropbox (Personal)/Research/4Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/deseq2_tissues/distceras/"
read_dir = "~/Dropbox (Personal)/Research/4Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/read_files/"
setwd(directory)
# Set the prefix for each output file name
outputPrefix = "Bs_tissues_distceras_DESeq2"
####################################
# DESeq2 Analyses
# Modified from: https://benchtobioinformatics.wordpress.com/category/dexseq/
####################################
# Load DESeq2 library for differential expression
library("DESeq2")
# Read in counts files for each tissue
sampleFiles= c("Bb7-BsV1_genome.counts",
"Bb8-BsV1_genome.counts",
"D1-BsV1_genome.counts",
"D2-BsV1_genome.counts",
"D4-BsV1_genome.counts",
"F1-BsV1_genome.counts",
"F4-BsV1_genome.counts",
"OT1-BsV1_genome.counts",
"OT2-BsV1_genome.counts",
"OT3-BsV1_genome.counts",
"P1-BsV1_genome.counts",
"P2-BsV1_genome.counts",
"P3-BsV1_genome.counts",
"R1-BsV1_genome.counts",
"R2-BsV1_genome.counts",
"R4-BsV1_genome.counts",
"TL3-BsV1_genome.counts",
"TL4-BsV1_genome.counts")
# Set sample names for counts
sampleNames = c("Brain 7", "Brain 8",
"Distal Ceras 1", "Distal Ceras 2", "Distal Ceras 3",
"Foot 1", "Foot 2",
"Oral Tentacle 1", "Oral Tentacle 2", "Oral Tentacle 3",
"Proximal Ceras 1", "Proximal Ceras 2", "Proximal Ceras 3",
"Rhinophore 1", "Rhinophore 2", "Rhinophore 3",
"Tail 1", "Tail 2")
# Set sample conditions for counts
sampleCondition = c("brain", "brain",
"distCeras","distCeras","distCeras",
"foot","foot",
"oralTent","oralTent","oralTent",
"proxCeras","proxCeras","proxCeras",
"rhinophore","rhinophore","rhinophore",
"tail","tail")
# Create DESeq2 sample table
sampleTable = data.frame(sampleName = sampleNames, fileName = sampleFiles, condition = sampleCondition)
# Set treatment levels for DESeq2 analysis
treatments = c("brain","distCeras","foot","oralTent","proxCeras","rhinophore","tail")
# Create DESeq2 data set from counts
ddsHTSeq = DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = read_dir,
design = ~1 + condition)
colData(ddsHTSeq)$condition = factor(colData(ddsHTSeq)$condition,
levels = treatments)
# Calculate differential expression based on the negative binomial (i.e., Gamma-Poisson) distribution
dds = DESeq(ddsHTSeq)
res = results(dds, contrast=c(-1/6,1,-1/6,-1/6,-1/6,-1/6,-1/6))
# Save data results and normalized reads to csv
resdata = merge(as.data.frame(res), as.data.frame(counts(dds,normalized =TRUE)), by = 'row.names', sort = FALSE)
names(resdata)[1] = 'gene'
write.csv(resdata, file = paste0(outputPrefix, "-results-with-normalized.csv"), quote=FALSE)
# order results by padj value (most significant to least)
res = res[order(res$padj),]
# Produce DataFrame of results of statistical tests
mcols(res, use.names = T)
write.csv(as.data.frame(mcols(res, use.name = T)),file = paste0(outputPrefix, "-test-conditions.csv"))
# Replacing outlier value with estimated value as predicted by distrubution using
# "trimmed mean" approach. Recommended if you have several replicates per treatment
# DESeq2 will automatically do this if you have 7 or more replicates.
ddsClean = replaceOutliersWithTrimmedMean(dds)
ddsClean = DESeq(ddsClean)
tab = table(initial = results(dds)$padj < 0.05,
cleaned = results(ddsClean)$padj < 0.05)
addmargins(tab)
write.csv(as.data.frame(tab),file = paste0(outputPrefix, "-replaceoutliers.csv"))
resClean = results(ddsClean)
resClean = subset(res, padj<0.05)
resClean = resClean[order(resClean$padj),]
write.csv(as.data.frame(resClean),file = paste0(outputPrefix, "-replaceoutliers-results.csv"))
# Subset results to only include upregulated distal ceras genes
resClean.up = as.data.frame(subset(resClean, log2FoldChange>2))
counts = as.data.frame(counts(dds,normalized =TRUE))
counts.up = subset(counts, subset= rownames(counts) %in% rownames(resClean.up))
resClean.up.merged = merge(resClean.up, counts, by = 'row.names', sort = FALSE)
write.csv(resClean.up.merged,file = paste0(outputPrefix, "-upregulated-stats-filtered.csv"), quote=FALSE, row.names=FALSE)
# Subset results to only include downregulated distal ceras genes
resClean.down = as.data.frame(subset(resClean, log2FoldChange < -2))
counts.down = subset(counts, subset= rownames(counts) %in% rownames(resClean.down))
resClean.down.merged = merge(resClean.down, counts, by = 'row.names', sort = FALSE)
write.csv(resClean.down.merged,file = paste0(outputPrefix, "-downregulated-stats-filtered.csv"), quote=FALSE, row.names=FALSE)
####################################################################################
# Exploratory data analysis of RNAseq data with DESeq2
#
# these next R scripts are for a variety of visualization, QC and other plots to
# get a sense of what the RNAseq data looks like based on DESEq2 analysis
#
# 1) MA plot
# 2) rlog stabilization and variance stabiliazation
# 3) variance stabilization plot
# 4) heatmap of clustering analysis
# 5) PCA plot
####################################################################################
# MA plot of RNAseq data for entire dataset
# http://en.wikipedia.org/wiki/MA_plot
# genes with padj < 0.1 are colored Red
plotMA(ddsClean, ylim=c(-8,8))
dev.copy(png, paste0(outputPrefix, "-MAplot_initial_analysis.png"))
dev.off()
# Transform raw counts into normalized values
# DESeq2 has two options:  1) rlog transformed and 2) variance stabilization
# variance stabilization is very good for heatmaps, etc.
rld = rlogTransformation(ddsClean, blind=T)
####################################
# Bs_genome_DESeq2_distceras.R
# Written by: Jessica A. Goodheart
# Last Updated: 5 July 2022
# Purpose: To analyze the clade distribution and expression of distal ceras genes in Berghia
# Inputs used: Expression counts from htseq-count and Orthofinder/kinfin orthogroup results
####################################
####################################
# Initial setup
####################################
# Set the working directory
directory = "~/Dropbox (Personal)/Research/4Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/deseq2_tissues/distceras/"
read_dir = "~/Dropbox (Personal)/Research/4Projects/berghia_genome/April_2021/annotations_analysis/tissue_diffexp/read_files/"
setwd(directory)
# Set the prefix for each output file name
outputPrefix = "Bs_tissues_distceras_DESeq2"
####################################
# DESeq2 Analyses
# Modified from: https://benchtobioinformatics.wordpress.com/category/dexseq/
####################################
# Load DESeq2 library for differential expression
library("DESeq2")
# Read in counts files for each tissue
sampleFiles= c("Bb7-BsV1_genome.counts",
"Bb8-BsV1_genome.counts",
"D1-BsV1_genome.counts",
"D2-BsV1_genome.counts",
"D4-BsV1_genome.counts",
"F1-BsV1_genome.counts",
"F4-BsV1_genome.counts",
"OT1-BsV1_genome.counts",
"OT2-BsV1_genome.counts",
"OT3-BsV1_genome.counts",
"P1-BsV1_genome.counts",
"P2-BsV1_genome.counts",
"P3-BsV1_genome.counts",
"R1-BsV1_genome.counts",
"R2-BsV1_genome.counts",
"R4-BsV1_genome.counts",
"TL3-BsV1_genome.counts",
"TL4-BsV1_genome.counts")
# Set sample names for counts
sampleNames = c("Brain 7", "Brain 8",
"Distal Ceras 1", "Distal Ceras 2", "Distal Ceras 3",
"Foot 1", "Foot 2",
"Oral Tentacle 1", "Oral Tentacle 2", "Oral Tentacle 3",
"Proximal Ceras 1", "Proximal Ceras 2", "Proximal Ceras 3",
"Rhinophore 1", "Rhinophore 2", "Rhinophore 3",
"Tail 1", "Tail 2")
# Set sample conditions for counts
sampleCondition = c("brain", "brain",
"distCeras","distCeras","distCeras",
"foot","foot",
"oralTent","oralTent","oralTent",
"proxCeras","proxCeras","proxCeras",
"rhinophore","rhinophore","rhinophore",
"tail","tail")
# Create DESeq2 sample table
sampleTable = data.frame(sampleName = sampleNames, fileName = sampleFiles, condition = sampleCondition)
# Set treatment levels for DESeq2 analysis
treatments = c("brain","distCeras","foot","oralTent","proxCeras","rhinophore","tail")
# Create DESeq2 data set from counts
ddsHTSeq = DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = read_dir,
design = ~1 + condition)
colData(ddsHTSeq)$condition = factor(colData(ddsHTSeq)$condition,
levels = treatments)
# Calculate differential expression based on the negative binomial (i.e., Gamma-Poisson) distribution
dds = DESeq(ddsHTSeq)
res = results(dds, contrast=c(-1/6,1,-1/6,-1/6,-1/6,-1/6,-1/6))
# Save data results and normalized reads to csv
resdata = merge(as.data.frame(res), as.data.frame(counts(dds,normalized =TRUE)), by = 'row.names', sort = FALSE)
names(resdata)[1] = 'gene'
write.csv(resdata, file = paste0(outputPrefix, "-results-with-normalized.csv"), quote=FALSE)
# order results by padj value (most significant to least)
res = res[order(res$padj),]
# Produce DataFrame of results of statistical tests
mcols(res, use.names = T)
write.csv(as.data.frame(mcols(res, use.name = T)),file = paste0(outputPrefix, "-test-conditions.csv"))
# Replacing outlier value with estimated value as predicted by distrubution using
# "trimmed mean" approach. Recommended if you have several replicates per treatment
# DESeq2 will automatically do this if you have 7 or more replicates.
ddsClean = replaceOutliersWithTrimmedMean(dds)
ddsClean = DESeq(ddsClean)
tab = table(initial = results(dds)$padj < 0.05,
cleaned = results(ddsClean)$padj < 0.05)
addmargins(tab)
write.csv(as.data.frame(tab),file = paste0(outputPrefix, "-replaceoutliers.csv"))
resClean = results(ddsClean)
resClean = subset(res, padj<0.05)
resClean = resClean[order(resClean$padj),]
write.csv(as.data.frame(resClean),file = paste0(outputPrefix, "-replaceoutliers-results.csv"))
# Subset results to only include upregulated distal ceras genes
resClean.up = as.data.frame(subset(resClean, log2FoldChange>2))
counts = as.data.frame(counts(dds,normalized =TRUE))
counts.up = subset(counts, subset= rownames(counts) %in% rownames(resClean.up))
resClean.up.merged = merge(resClean.up, counts, by = 'row.names', sort = FALSE)
write.csv(resClean.up.merged,file = paste0(outputPrefix, "-upregulated-stats-filtered.csv"), quote=FALSE, row.names=FALSE)
# Subset results to only include downregulated distal ceras genes
resClean.down = as.data.frame(subset(resClean, log2FoldChange < -2))
counts.down = subset(counts, subset= rownames(counts) %in% rownames(resClean.down))
resClean.down.merged = merge(resClean.down, counts, by = 'row.names', sort = FALSE)
write.csv(resClean.down.merged,file = paste0(outputPrefix, "-downregulated-stats-filtered.csv"), quote=FALSE, row.names=FALSE)
####################################################################################
# Exploratory data analysis of RNAseq data with DESeq2
#
# these next R scripts are for a variety of visualization, QC and other plots to
# get a sense of what the RNAseq data looks like based on DESEq2 analysis
#
# 1) MA plot
# 2) rlog stabilization and variance stabiliazation
# 3) variance stabilization plot
# 4) heatmap of clustering analysis
# 5) PCA plot
####################################################################################
# MA plot of RNAseq data for entire dataset
# http://en.wikipedia.org/wiki/MA_plot
# genes with padj < 0.1 are colored Red
plotMA(ddsClean, ylim=c(-8,8))
dev.copy(png, paste0(outputPrefix, "-MAplot_initial_analysis.png"))
dev.off()
# Transform raw counts into normalized values
# DESeq2 has two options:  1) rlog transformed and 2) variance stabilization
# variance stabilization is very good for heatmaps, etc.
rld = rlogTransformation(ddsClean, blind=T)
vsd = varianceStabilizingTransformation(ddsClean, blind=T)
# Save normalized values
write.table(as.data.frame(assay(rld)),file = paste0(outputPrefix, "-rlog-transformed-counts.txt"), sep = '\t')
write.table(as.data.frame(assay(vsd)),file = paste0(outputPrefix, "-vst-transformed-counts.txt"), sep = '\t')
# Top expressed genes overall with heatmap.2
library("RColorBrewer")
library("gplots")
library("genefilter")
library("ggplot2")
library("grDevices")
select = order(rowMeans(counts(ddsClean,normalized=T)),decreasing=T)[1:1000]
my_palette = colorRampPalette(c('blue','white',"red"))(n=1000)
png(file=paste0(outputPrefix, "-HEATMAP-top1000.png"), width=1000, height=1000)
heatmap.2(assay(rld)[select,], col=my_palette,
scale="row", key=T, keysize=1, symkey=T,
density.info="none", trace="none",
cexCol=0.6, labRow=F,
main="Top 1000 Expressed Genes Heatmap")
dev.off()
# Top expressed genes upregulated
png(file=paste0(outputPrefix, "-HEATMAP-top-expressed-tissue.png"), width=1000, height=1000)
heatmap.2(assay(rld)[rownames(resClean.up),], col=my_palette,
scale="row", key=T, keysize=1, symkey=T,
density.info="none", trace="none",
cexCol=0.6, labRow=F,
main="Top Differentially Expressed Genes Heatmap")
dev.off()
##########################################
### Venn diagram of upregulated genes ####
##########################################
library(ggpolypath)
library(RColorBrewer)
library(venn)
# Create presence/absence data frame for venn diagram
venn_df = data.frame(matrix(ncol = 0, nrow = nrow(counts.up)))
rownames(venn_df) = rownames(counts.up)
# Calculate average expression for each tissue type in new data frame
venn_df$DC = (counts.up$`Distal Ceras 1` + counts.up$`Distal Ceras 2` + counts.up$`Distal Ceras 3`)/3
venn_df$PC = (counts.up$`Proximal Ceras 1` + counts.up$`Proximal Ceras 2` + counts.up$`Proximal Ceras 3`)/3
venn_df$OT = (counts.up$`Oral Tentacle 1` + counts.up$`Oral Tentacle 2` + counts.up$`Oral Tentacle 3`)/3
venn_df$RH = (counts.up$`Rhinophore 1` + counts.up$`Rhinophore 2` + counts.up$`Rhinophore 3`)/3
venn_df$BR = (counts.up$`Brain 7` + counts.up$`Brain 8`)/2
venn_df$TL = (counts.up$`Tail 1` + counts.up$`Tail 2`)/2
venn_df$FO = (counts.up$`Foot 1` + counts.up$`Foot 2`)/2
# Determine presence absence using average expression: Normalized counts > 0.5 considered present
venn_df[venn_df > 0.5] = as.integer(1)
venn_df[venn_df <= 0.5] = as.integer(0)
colnames(venn_df)=c("Distal Ceras",  "Proximal Ceras",
"Oral Tentacle", "Rhinophore", "Brain",
"Tail", "Foot")
# Plot venn diagram
cols = brewer.pal(7, "Set2")
png(file=paste0(outputPrefix, "-venn-diagram-up.png"), width=1000, height=1000)
venn::venn(venn_df, zcolor=cols, ilcs = 2, sncs = 2, plotsize=100)
dev.off()
rownames(filter(venn_df, DC=="1" & PC=="0" & OT=="0" & RH=="0" & BR=="1" & TA=="0" & FO=="0"))
colnames(venn_df) <- c("DC",  "PC", "OT", "RH", "BR", "TA", "FO")
rownames(filter(venn_df, DC=="1" & PC=="0" & OT=="0" & RH=="0" & BR=="1" & TA=="0" & FO=="0"))
head(venn_df)
filter(venn_df, DC=="1" & PC=="0" & OT=="0" & RH=="0" & BR=="1" & TA=="0" & FO=="0")
?filter
rownames(dplyr::filter(venn_df, DC=="1" & PC=="0" & OT=="0" & RH=="0" & BR=="1" & TA=="0" & FO=="0"))
nrow(venn_df)
